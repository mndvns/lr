#!/usr/bin/env node

/**
 * Module dependencies.
 */

var debug = require('debug')('lr:bin');
var program = require('commander');
var TTY = require('tty');
var LR = require('..');
var config = require('../lib/config');

// get app defaults
var defaults = require('../lib/defaults.json');

// get current working dir
var cwd = process.cwd();

/**
 * Configure and expose `program`.
 */

module.exports = program
  .version(require('../package.json').version)
  .usage('[options] [path]:[command] ...')
  .option('-p, --port <port>', 'listen on port', defaults.port.value)
  .option('-m, --mute <char>', 'character to suppress reloading', defaults.mute.value)
  .option('-C, --ignore-config', 'ignore all config files')
  .option('-c, --config <path>', 'path to configuration file', '.lr.yml')
  .option('-i, --ignore <pattern>,...', 'regular expression(s) of files to ignore', list, [])
  .option('-v, --verbose', 'more detailed log messages')
  .option('-s, --silent', 'suppress all log messages', tty)
  .option('-o, --stdout', 'write log messages to process stdout', false)
  .option('-I, --indent', 'don\'t print indentation lines', tty(false))
  .option('-t, --tty <when>', 'treat output as tty [auto|always|never]', defaults.tty.value)

program.parse(process.argv);

var tty = program.tty;
var log = require('../lib/utils')
  .log(tty !== 'never' && tty !== 'false' && tty !== false)

debug('port', program.port);
debug('config', program.config);
debug('ignore', program.ignore);
debug('silent', program.silent);

// initialize `Livereload`
var lr = new LR();

if (program.silent) lr.silent();

if (program.ignoreConfig !== true) {

  var args = config.loadPath(cwd, {filename: program.config}).commands;
  debug('args', args);

  for (var k in args) lr.watch(k, args[k].cmd, args[k].muted);

} else {

  if (program.args.length === 0) program.args.push('*');

  program.args.forEach(function run(arg) {
    var parts = arg.split(':');
    var path = parts[0];
    var command = parts[1];
    var muted;

    if (command && command.indexOf(program.mute) === 0) {
      command = command.slice(1);
      muted = true;
    }

    lr.watch(path, command, muted);
  });
}


lr.start(function(file) {
  if (program.silent !== true) log('reloading ' + file);
});

lr.listen(program.port, function() {
  if (program.silent !== true) log('listening on port ' + program.port);
});

/**
 * Parse list.
 */

function list(str) {
  return str.split(/ *, */);
}

function tty(status) {
  // TODO finish this
  /* process.stdout.write('\n@@@@' + TTY.isatty() + '\n'); */
}
