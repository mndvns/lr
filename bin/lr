#!/usr/bin/env node

/**
 * Module dependencies.
 */

var debug = require('debug')('lr:bin');
var program = require('commander');
var TTY = require('tty');
var LR = require('..');
var config = require('../lib/config');

// get app defaults
var defaults = require('../lib/defaults');

// get current working dir
var cwd = process.cwd();

/**
 * Configure and expose `program`.
 */

module.exports = program
  .version(require('../package.json').version)
  .usage('[options] [path]:[command] ...')
  .option('-p, --port <port>', 'listen on port', defaults.port.value)
  .option('-c, --config <path>', 'path to configuration file')
  .option('-i, --ignore <pattern>,...', 'regular expression(s) of files to ignore', list, [])
  .option('-v, --verbose', 'more detailed log messages')
  .option('-s, --silent', 'suppress all log messages')
  .option('-t, --tty <when>', 'treat output as tty [auto|always|never]', defaults.tty.value)

program.parse(process.argv);

var options = {};
options.port = program.port;
options.config = program.config;
options.ignore = program.ignore;
options.verbose = program.verbose;
options.silent = program.silent;
options.tty = program.tty;

var lr = new LR(options);

var conf = lr.loadPath(cwd, options);
var commands = conf.commands;
var options = conf.options;

for (var k in commands) lr.watch(k, commands[k].cmd, commands[k].muted);

lr.start(function(file) {
  lr.log('reloading ' + file);
});

lr.listen(program.port, function() {
  lr.log('listening on port ' + program.port);
});

/**
 * Parse list.
 */

function list(str) {
  return str.split(/ *, */);
}

function tty(status) {
  // TODO finish this
  /* process.stdout.write('\n@@@@' + TTY.isatty() + '\n'); */
}
